LAB 06
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXX  Q1 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

#include<iostream>
using namespace std;

class Complex{
  private:
  double real;
  double imag;
  
  public:
  Complex(){
      real = 0;
      imag = 0;
  }
  Complex( double a , double b ){
      real = a;
      imag = b;
  }
  void show(){
      if (imag>0){
      cout<<real<<"+"<<imag<<"i"<<endl;}
      else{
         cout<<real<<imag<<"i"<<endl; 
      }
  } 
  
  Complex add(Complex c){
      Complex answer;
      answer.real = c.real + real;
      answer.imag = c.imag + imag;
      
  return(answer);}
  
  Complex subtract(Complex c){
      Complex answer;
      answer.real = real - c.real ;
      answer.imag = imag - c.imag ;
      
  return(answer);}
  
  Complex multiply(Complex c){
      Complex answer;
      answer.real = (c.real * real) - (c.imag*imag);
      answer.imag = (c.imag * real) + (c.real * imag);
      
  return(answer);}
  
  Complex add(double c){
      Complex answer;
      answer.real = c + real;
      answer.imag = imag;
      
  return(answer);}
  
  
  Complex subtract(double c){
      Complex answer;
      answer.real =  real - c;
      answer.imag = imag;
      
  return(answer);}
  
  Complex multiply(double c){
      Complex answer;
      answer.real = c * real;
      answer.imag = c * imag;
      
  return(answer);}
  
  
};


int main(){
    double real, imag;
    cin>>real>>imag;
    Complex c1 = {real, imag};

    cin>>real>>imag;
    Complex c2 = {real, imag};

    double d1;
    cin>>d1;
    
    Complex result;
    //showing the numbers:
    cout<<"c1: "; c1.show();
    cout<<"c2: "; c2.show();
    cout<<"d1: "<<d1<<endl;

    // Check the opertions where both operands are complex
    result = c1.add(c2); 
    cout<<"c1+c2: "; result.show();
    
    
    result = c1.subtract(c2); 
    cout<<"c1-c2: "; result.show();
    
    result = c1.multiply(c2); 
    cout<<"c1*c2: "; result.show();
    
    // Check the opertions where one operator is complex, other is double

    result = c1.add(d1); 
    cout<<"c1+d1: "; result.show();
    
    
    result = c1.subtract(d1); 
    cout<<"c1-d1: "; result.show();
    
    result = c1.multiply(d1); 
    cout<<"c1*d1: "; result.show();
}











XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Q2 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


#include<iostream>
using namespace std;

double* add(double* c1, double* c2){
    double* answer = new double[2];
    *(answer) = *(c1) + *(c2);
    *(answer+1) = *(c1+1) + *(c2+1);
    return(answer);
    delete [] answer;
    answer = nullptr;
}

double* add(double* c1, double c2){
    double* answer = new double[2];
    *(answer) = *(c1) + c2;
    *(answer+1) = *(c1+1);
    return(answer);
    delete [] answer;
    answer = nullptr;
}


double* subtract(double* c1, double* c2){
    double* answer = new double[2];
    *(answer) = *(c1) - *(c2);
    *(answer+1) = *(c1+1) - *(c2+1);
    return(answer);
    delete [] answer;
    answer = nullptr;
}

double* subtract(double* c1, double c2){
    double* answer = new double[2];
    *(answer) = *(c1) - (c2);
    *(answer+1) = *(c1+1);
    return(answer);
    delete [] answer;
    answer = nullptr;
}

double* multiply(double* c1, double* c2){
    double* answer = new double[2];
    *(answer) = (*(c1))*(*(c2)) - (*(c1+1))*(*(c2+1));
    *(answer+1) = (*(c1))*(*(c2+1)) + (*(c1+1))*(*(c2));
    return(answer);
    delete [] answer;
    answer = nullptr;
}

double* multiply(double* c1, double c2){
    double* answer = new double[2];
    *(answer) = (*c1) * c2; 
    *(answer+1) = (*(c1+1)) * c2; 
    return(answer);
    delete [] answer;
    answer = nullptr;
}


void show(double* answer){
    if(answer[1] > 0){
        cout <<answer[0] << "+" <<answer[1]<<"i"<<endl;
    }
    else{
        cout <<answer[0] <<answer[1]<<"i"<<endl;
    }
}




int main()
{
    // there are two elements in this array the first one represents the real part and second one represents imagenary part
    double * c1 = new double[2]; 
    double * c2 = new double[2];
    
    cin>>c1[0]>>c1[1];
    cin>>c2[0]>>c2[1];

    double d1;
    cin>>d1;

    cout<<"c1+c2: "; show(add(c1,c2));
    cout<<"c1-c2: "; show(subtract(c1,c2));
    cout<<"c1*c2: "; show(multiply(c1,c2));

    
    cout<<"c1+d1: "; show(add(c1,d1));
    cout<<"c1-d1: "; show(subtract(c1,d1));
    cout<<"c1*d1: "; show(multiply(c1,d1));
}





XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Q3 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


#include<iostream>
#include<string>
#include<cstring>

using namespace std;

// write your code here


int countHoles(int num){

    if (int(num/10) == 0){
        if ((num == 0) || ( num == 4) || ( num == 6) || (num == 9)){
        return(1);
    }
        else if (num == 8){
            return(2);
        }
        else{
            return(0);
        }
    }
    else {
        int number = (num % 10);
        int rem = int(num/10);
        if ((number == 0) || ( number == 4) || ( number == 6) || (number == 9)){
        return(1 + countHoles(rem));
    }
        else if (number == 8){
            return(2 + countHoles(rem));
        }
        else{
            return(countHoles(rem));
        }
    }
    
}

int countHoles(char* array){
    if (*array == '\0'){
        if ((*array == 'A') || ( *array == 'D') || ( *array== 'O') || (*array == 'P') || ( *array== 'Q') || (*array == 'R')){
        return(1);
    }
        else if (*array == 'B'){
            return(2);
        }
        else{
            return(0);
        }
    }
    else {
        if ((*array == 'A') || ( *array == 'D') || ( *array== 'O') || (*array == 'P') || ( *array== 'Q') || (*array == 'R')){
        return(1 + countHoles((array+1)));
    }
        else if (*array == 'B'){
            return(2 + countHoles((array+1)));
        }
        else{
            return(countHoles((array+1)));
        }
    }
    
}







// Please do not change the main()
int main() 
{
    string input;

    int nHoles=0;
    
    while(getline(cin,input))
    {
        if(isdigit(input[0]))
        {
            nHoles+=countHoles(stoi(input));
        }
        else
        {
            char * carr = new char[input.length()];
            carr = strcpy(carr, input.c_str());
            nHoles +=countHoles(carr);
        }
    }
    
    cout << nHoles <<" holes";
    return 0;
}